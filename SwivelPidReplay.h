#pragma config(Sensor, in1,    ,               sensorPotentiometer)
#pragma config(Sensor, in2,    ,               sensorPotentiometer)
#pragma config(Sensor, in3,    ,               sensorPotentiometer)
#pragma config(Sensor, in4,    ,               sensorPotentiometer)
#pragma config(Sensor, dgtl1,  ,               sensorDigitalIn)
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop, driveLeft)
#pragma config(Motor,  port2,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,           ,             tmotorVex393_HBridge, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task swivelPidReplay(){
	writeDebugStreamLine("(%s,%d): Entering swivelPidController task ",__FILE__,__LINE__);
	int requestedValue = -1;
	int lastError = -1;
	int totalError = 0;

	while(true){
		if(vexRT[Btn8U]){
			requestedValue = -1;
			motor[port3] = swivelPowerUp;
			while(vexRT[Btn8U]){}
			requestedValue = getCurrentSwivelValue();
		}else if(vexRT[Btn8D]){
			requestedValue = -1;
			motor[port3] = swivelPowerDown;
			while(vexRT[Btn8D]){}
			requestedValue = getCurrentSwivelValue();
		}else if(vexRT[Btn8R]){
			requestedValue = -1;
		}else if(fabs(vexRT[Ch2]) > minSwivelJoystickMovement){
			requestedValue = -1;
			motor[port3] = -1*vexRT[Ch2];
		}else if(requestedValue == -1){
			motor[port3] = 0;
		}

		if(requestedValue != -1){
			int currentValue = getCurrentSwivelValue();
			int error = requestedValue - currentValue;
			totalError += error;
			int drive = error*swivel_kP + totalError*swivel_kI + (error-lastError)*swivel_kD;
			lastError = error;
			if(drive > swivel_max_value){
				drive = swivel_max_value;
			}else if(drive < swivel_min_value){
				drive = swivel_min_value;
			}
			if(runSwivel) motor[port3] = -1*drive;
		}
		sleep(25);
	}
}
