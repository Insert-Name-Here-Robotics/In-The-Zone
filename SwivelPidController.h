#pragma config(Sensor, in1,    ,               sensorPotentiometer)
#pragma config(Sensor, in2,    ,               sensorPotentiometer)
#pragma config(Sensor, in3,    ,               sensorPotentiometer)
#pragma config(Sensor, in4,    ,               sensorPotentiometer)
#pragma config(Sensor, dgtl1,  ,               sensorDigitalIn)
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop, driveLeft)
#pragma config(Motor,  port2,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,           ,             tmotorVex393_HBridge, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


#define potentiometerCurrentValue (4095 - (SensorValue[in1]) + (SensorValue[in2]) )/2

//const int swivelPowerUp = 84;
//const int swivelPowerDown = -45;
//const int minSwivelJoystickMovement = 15;

bool runMotorSwivelPID = true;

float pidSwivel_Kp = 0.7;
//float pidSwivel_Kjoystick = 0.5;

int max_drive_value = 100;
int min_drive_value = -50;

int pidSwivelRequestedValue;
int pidSwivelSensorCurrentValue;
int pidSwivelError;
float pidSwivelDrive;

task swivelPidController(){
	writeDebugStreamLine("(%s,%d): Entering swivelPidController task ",__FILE__,__LINE__);


	pidSwivelRequestedValue = 2000;
	while(true){
		pidSwivelSensorCurrentValue = potentiometerCurrentValue;
		pidSwivelError = pidSwivelRequestedValue - pidSwivelSensorCurrentValue;
		pidSwivelDrive = pidSwivelError * pidSwivel_Kp;
		if ( pidSwivelDrive > max_drive_value ){
			pidSwivelDrive = max_drive_value ;
		} else if ( pidSwivelDrive < min_drive_value ){
			pidSwivelDrive = min_drive_value ;
		}
		writeDebugStreamLine("Pot:%d Drv:%d Enabled:%d", pidSwivelSensorCurrentValue, pidSwivelDrive, runMotorSwivelPID);
		if(runMotorSwivelPID) motor[port3] = -1*pidSwivelDrive;
		// User input
		/*if (vexRT[Btn8U]){
			pidSwivelRequestedValue+=100;
		} else if (vexRT[Btn8D]) {
			pidSwivelRequestedValue-=100;
		}
		if (fabs(vexRT[Ch2])> minSwivelJoystickMovement) {
			pidSwivelRequestedValue = pidSwivelRequestedValue +  vexRT[Ch2]*pidSwivel_Kjoystick;
			if ( pidSwivelRequestedValue > 3000 ) {
				pidSwivelRequestedValue = 3000 ;
			} else if ( pidSwivelRequestedValue < 400 ) {
				pidSwivelRequestedValue = 400 ;
			}
		}*/
		sleep(25);
	}
}


		/*if(vexRT[Btn8U]){
		motor[port3] = -1 * swivelPowerUp;
		//motor[port8] = swivelPowerUp;
		}else if(vexRT[Btn8D]){
		motor[port3] = -1 * swivelPowerDown;
		//motor[port8] = swivelPowerDown;
		}else if(fabs(vexRT[Ch2]) > minSwivelJoystickMovement){
		motor[port3] = -1 * vexRT[Ch2];
		}else{
		motor[port3] = 0;
		//motor[port8] = 0;
		}*/
