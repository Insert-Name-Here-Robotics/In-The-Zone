#pragma config(Sensor, in1,    ,               sensorPotentiometer)
#pragma config(Sensor, in2,    ,               sensorPotentiometer)
#pragma config(Sensor, in3,    ,               sensorPotentiometer)
#pragma config(Sensor, in4,    ,               sensorPotentiometer)
#pragma config(Sensor, dgtl1,  ,               sensorDigitalIn)
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop, driveLeft)
#pragma config(Motor,  port2,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,            ,             tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,           ,             tmotorVex393_HBridge, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task combinedReplay(){
	writeDebugStreamLine("(%s,%d): Entering rackReplay task ",__FILE__,__LINE__);
	while(true){
		motor[port1] = /*deadbandDrive*/(bch3 + bch4);
		motor[port10] = -1*/*deadbandDrive*/(bch3 - bch4);
		if(b7u){
			motor[port2] = -1 * rackPowerUp;
			motor[port9] = rackPowerUp;
		}else if(b7d){
			motor[port2] = -1 * rackPowerDown;
			motor[port9] = rackPowerDown;
		}else{
			motor[port2] = 0;
			motor[port9] = 0;
		}
		if(b6u){
			motor[port8] = clawPowerOpen;
		}else if(b6d){
			motor[port8] = clawPowerClosed;
		}else{
			motor[port8] = 0;
		}
		if(b5u){
			motor[port4] = -1 * leftLiftPowerUp;
			motor[port5] = -1 * leftLiftPowerUp;
			motor[port6] = rightLiftPowerUp;
			motor[port7] = rightLiftPowerUp;
		}else if(b5d){
			motor[port4] = -1 * leftLiftPowerDown;
			motor[port5] = -1 * leftLiftPowerDown;
			motor[port6] = rightLiftPowerDown;
			motor[port7] = rightLiftPowerDown;
		}else{
			motor[port4] = 0;
			motor[port5] = 0;
			motor[port6] = 0;
			motor[port7] = 0;
		}
		if(fabs(bch2) > minSwivelJoystickMovement){
			motor[port3] = -1*bch2;
		}
		sleep(25);
	}
}
